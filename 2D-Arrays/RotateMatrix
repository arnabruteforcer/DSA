/**
Problem Statement

You are given a square matrix of size n x n.
The goal is to rotate the matrix in ati-clockwise direction

Input: [ 1  2  3
	 4  5  6   
         7  8  9 ]


 Output: [  3  6  9 
            2  5  8
	    1  4  7 ]

**/

import java.util.* ;
import java.io.*; 

public class Solution {
	
	/** Approach 1
	
	The approach involves rotaion of the matrix by shifting elements in an anti-clockwise manner
	1) We start with the outermost row and columns and travel inward

	2) We proceed until we reach the mid of the array. At each traversal, we are 
	reducing the number of rows and columns to traverse by 2  

	**/
	public static void inplaceRotate(int[][] arr, int n) {
		int mid = n/2;
		for(int i=0; i<mid; i++) {
			for(int j=i; j<n-1-i; j++) {
				int temp = arr[i][j];
				// top horizontal row becomes right vertical column
				arr[i][j] = arr[j][n-1-i];

				// right vertical column becomes bottom horizontal row 
				arr[j][n-1-i] = arr[n-1-i][n-1-j];

				// bottom horizontal row becomes left vertical column
				arr[n-1-i][n-1-j] = arr[n-1-j][i];

				// left vertical column becomes top horizontal row
				arr[n-1-j][i] = temp;
			}
		}
	}

	// Time complexity - O(n^2)
	// Space complexity - O(1)




/** Approach 2
	
	1) The second approach involves taking the transpose as the 1st step

	2) The 2nd step includes column reversal
	
	**/
	public static void inplaceRotateUsingTranspose(int[][] arr, int n) {
	
		int mid = n/2;
		
		// find the transpose of the of the matrix 
		for(int i=0; i<n; i++) {
			for(int j=i; j<n; j++) {
				int temp = arr[i][j];
				arr[i][j] = arr[j][i];
				arr[j][i] = temp;
			}
    	}

		// reverse the row values between top and bottom
		for(int i=0; i<mid; i++) {
			for(int j=0; j<n; j++) {
				int temp = arr[i][j];
				arr[i][j] = arr[n-1-i][j];
				arr[n-1-i][j] = temp;
			}
		}


	}	

	// Time complexity - O(n^2)
	// Space complexity - O(1)

}
